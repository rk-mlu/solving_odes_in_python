This book was based on a set of lecture notes written for the book *A Primer on Scientific Programming with Python* by
Hans Petter Langtangen cite{langtangen2012primer}, mainly covering topics from Appendix A, C,
and E. The original notes have been extended with more material on implicit solvers and
automatic time-stepping methods, to provide a more complete and balanced
overview of state-of-the-art solvers for ordinary differential equations (ODEs). The 
main purpose of the notes is to serve as a brief and gentle introduction to solving
differential equations in Python, for use in the course
*Introduction to programming for scientific applications* (IN1900, 10 ETCS credits) at the
University of Oslo. To read these notes one should have a basic knowledge of Python
and NumPy, see for instance cite{sundnes2020introduction}, and it is also useful to have a 
fundamental understanding of ODEs.

One may ask why this is useful to learn how to write your own ODE solvers in Python, when there are already
multiple such solvers available, for instance in the SciPy library. However, no single ODE
solver is the best and most efficient tool for all possible ODE problems, and the choice
of solver should always be based on the characteristics of the problem. To make such choices,
it is extremely useful to know the strengths and weaknesses of the different solvers,
and the best way to obtain this knowledge is to program your own collection of ODE solvers.
Different ODE solvers are also conveniently grouped into families and hierarchies of solvers,
and provide an excellent example of how object-oriented programming (OOP) can be
used to maximize code reuse and minimize duplication.

The presentation style of the book is compact and pragmatic, and includes
a large number of code examples to illustrate how the various ODE solvers can 
be implemented and applied in practice. The complete source code for all examples,
as well as Jupyter notebooks for all the chapters, is provided in the online resources 
accompanying this book. All the
programs and code examples are written in a simple and
compact Python style, and generally avoid the use of advanced tools and features. 
Experienced Python programmers will therefore surely find more elegant
and modern solutions to many of the examples, including, for instance, abstract base
classes, type hints, and data classes, to mention a few. However, the main goal of
the book is to introduce the fundamentals of ODE solvers and OOP as part of an
introductory programming course, and we believe this purpose is best served by 
focusing on the basics. Readers familiar with scientific computing or numerical
software will probably also miss a discussion of computational performance. While 
performance is clearly relevant when solving ODEs, optimizing the performance of
a Python based solver easily becomes quite technical, and requires features like 
just-in-time compilers (e.g., Numba) or mixed-language programming. The solvers in this
book only use fairly basic features of Python and NumPy, which sacrifices some performance
but enhances understanding of the solver properties and their implementation. 

The book is organized as follows. Chapter ref{ch:ode_intro} introduces the forward Euler method,
and uses this simple method to introduce the fundamental ideas and principles that
underpin all the methods considered later. The chapter introduces the notation and general
mathematical formulation used throughout the book, both for scalar ODEs and systems of ODEs, 
and is essential reading for everyone with little prior experience with ODEs and ODE solvers.
The chapter also briefly explains how to use the ODE solvers from the SciPy library.
Readers already familiar with the fundamentals of the forward Euler method and its 
implementation may consider moving straight to Chapter ref{ch:runge_kutta}, which presents
explicit Runge-Kutta methods. The fundamental ideas of the methods are introduced, and 
the main focus of the chapter is how a collection of ODE solvers can be implemented as
a class hierarchy with minimal code duplication. Chapter ref{ch:stiff} introduces so-called
*stiff* ODEs, and presents techniques for simple stability analysis of Runge-Kutta methods.
The bulk of the chapter is then devoted to programming of implicit Runge-Kutta methods, 
which have better stability properties than explicit methods and therefore perform better 
for stiff ODEs. Chapter ref{ch:adaptive} then concludes the presentation of ODE solvers by
introducing methods for adaptive time step control, which is an essential component of
all modern ODE software. Chapter ref{ch:disease_models} is quite different 
from the preceding ones, since the focus is on a specific class of ODE models rather than 
a set of solvers. The simpler ODE problems considered in earlier chapters are useful for 
introducing and testing the solvers, but in order to appreciate both the
potential and the challenges of modelling with ODEs it is useful to step beyond this. 
As an example of a real-world application of ODEs we have chosen the famous Kermack-McKendrick
SIR (Susceptible-Infected-Recovered) model from epidemiology. These classic models were 
first developed in the early 1900s (see cite{SIR1}), and have 
received quite some attention in recent years, for obvious reasons. We derive the models
from a set of fundamental assumptions, and discuss the implications and limitations resulting
from these assumptions. The main focus of the chapter is then on how the models can be
modified and extended to capture new phenomena, and how these changes can be implemented
and explored using the solvers developed in preceding chapters. 

Although the focus of the text is on differential equations, Appendix ref{ch:diff_eq} is 
devoted to the related topic of *difference equations*. The motivation 
for including this chapter is that difference equations are closely related to 
ODEs, they have many important applications on their own, and numerical methods
for ODEs are essentially methods for turning differential equations into 
difference equations. Solving difference equations can therefore be seen as
a natural step on the way towards solving ODEs, and the standard formulation of 
difference equations in mathematical textbooks is already in a "computer-friendly" form, 
which is very easy to translate into a Python program using for-loops and arrays. 
Some students find difference equations easier to understand than differential equations, and
may benefit from reading Appendix ref{ch:diff_eq} first, while others find it easier to
go straight to the ODEs and leave Appendix ref{ch:diff_eq} for later.




# #if FORMAT in ("latex", "pdflatex")
## Just dump native latex
\noindent
\ \\
{\it April 2023}  \hfill  {\it Joakim Sundnes}
# #else
*Joakim Sundnes*, April 2023
# #endif
